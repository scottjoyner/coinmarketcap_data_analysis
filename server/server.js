var express = require('express');
var { graphqlHTTP } = require('express-graphql');
var { buildSchema } = require('graphql');
 
// Construct a schema, using GraphQL schema language
var schema = buildSchema(`type Weights {
  ticker: String
  USD_AvailibleMarketShare: Float
  USD_MaxSupplyMarketShare: Float
}

type Usd {
  price: Float
  volume_24h: Float
  percent_change_1h: Float
  percent_change_24h: Float
  percent_change_7d: Float
  percent_change_30d: Float
  percent_change_60d: Float
  percent_change_90d: Float
  market_cap: Float
  last_updated: String
}

type Quote {
  USD: Usd
}
input CoinInput {
  id: Int
  name: String
  symbol: String
  slug: String
  num_market_pairs: Int
  date_added: String
  max_supply: Int
  circulating_supply: Int
  total_supply: Int
  platform: String
  cmc_rank: Int
  last_updated: String
  tags: [String]
}
type Coin {
  id: Int
  name: String
  symbol: String
  slug: String
  num_market_pairs: Int
  date_added: String
  max_supply: Int
  circulating_supply: Int
  total_supply: Int
  platform: String
  cmc_rank: Int
  last_updated: String
  weights: Weights
  quote: Quote
  tags: [String]

}

type Status {
  timestamp: String
  error_code: Int
  error_message: String
  elapsed: Int
  credit_count: Int
  notice: String
  total_count: Int
}

type AutogeneratedMainType {
  coin: [Coin]
  status: Status
}
type Query {
    Coin(id: ID!): Coin
}
type Mutation {
    addCoin(input: CoinInput): Coin
}
`);
 
// The root provides a resolver function for each API endpoint
var root = {
  hello: () => {
    return 'Hello world!';
  },
};
 
var app = express();
app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));
app.listen(4000);
console.log('Running a GraphQL API server at http://localhost:4000/graphql');